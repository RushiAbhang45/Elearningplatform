@model Quiz
@{
    ViewData["Title"] = "Take Quiz";
    Layout = "_Layout";
}

<div class="min-h-screen bg-gradient-to-br from-indigo-50 to-purple-100" x-data="quizApp(@Model.TimeLimit, @Model.Questions.Count)">
    <!-- Quiz Header -->
    <div class="bg-gradient-to-r from-indigo-600 to-purple-600 text-white shadow-lg">
        <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
            <div class="flex items-center justify-between">
                <div>
                    <h1 class="text-3xl font-bold mb-2">@Model.Title</h1>
                    <p class="text-indigo-100">@Model.Chapter.Subject.Name • @Model.Chapter.Title</p>
                    @if (!string.IsNullOrEmpty(Model.Description))
                    {
                        <p class="text-indigo-200 text-sm mt-2">@Model.Description</p>
                    }
                </div>
                <!-- Timer -->
                <div class="bg-white bg-opacity-20 rounded-xl p-4 text-center">
                    <div class="text-2xl font-bold" x-text="formatTime(timeLeft)"></div>
                    <div class="text-sm text-indigo-200">Time Remaining</div>
                </div>
            </div>
        </div>
    </div>

    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <!-- Quiz Instructions -->
        <div class="bg-white rounded-xl shadow-lg p-6 mb-8" x-show="!quizStarted">
            <div class="text-center">
                <i class="fas fa-info-circle text-4xl text-blue-500 mb-4"></i>
                <h2 class="text-2xl font-bold text-gray-900 mb-4">Quiz Instructions</h2>
                <div class="max-w-2xl mx-auto text-left space-y-4 text-gray-600">
                    <div class="flex items-start">
                        <i class="fas fa-check-circle text-green-500 mt-1 mr-3"></i>
                        <span>This quiz contains <strong>@Model.Questions.Count questions</strong></span>
                    </div>
                    <div class="flex items-start">
                        <i class="fas fa-clock text-orange-500 mt-1 mr-3"></i>
                        <span>You have <strong>@Model.TimeLimit minutes</strong> to complete the quiz</span>
                    </div>
                    <div class="flex items-start">
                        <i class="fas fa-mouse-pointer text-blue-500 mt-1 mr-3"></i>
                        <span>Select one answer for each question</span>
                    </div>
                    <div class="flex items-start">
                        <i class="fas fa-save text-purple-500 mt-1 mr-3"></i>
                        <span>You can review and change your answers before submitting</span>
                    </div>
                    <div class="flex items-start">
                        <i class="fas fa-exclamation-triangle text-red-500 mt-1 mr-3"></i>
                        <span>Once you submit, you cannot change your answers</span>
                    </div>
                </div>
                <button @@click ="startQuiz()"
                        class="mt-8 bg-gradient-to-r from-indigo-600 to-purple-600 text-white px-8 py-4 rounded-lg hover:from-indigo-700 hover:to-purple-700 transition duration-200 font-semibold text-lg">
                    <i class="fas fa-play-circle mr-2"></i>Start Quiz
                </button>
            </div>
        </div>

        <!-- Quiz Questions -->
        <form asp-controller="Quiz" asp-action="Submit" method="post" x-show="quizStarted" style="display: none;">
            <input type="hidden" name="quizId" value="@Model.Id" />

            <!-- Progress Bar -->
            <div class="bg-white rounded-xl shadow-lg p-6 mb-6">
                <div class="flex items-center justify-between mb-2">
                    <span class="text-sm font-medium text-gray-700">Progress</span>
                    <span class="text-sm text-gray-500" x-text="`${answeredCount}/@Model.Questions.Count questions answered`"></span>
                </div>
                <div class="w-full bg-gray-200 rounded-full h-3">
                    <div class="bg-gradient-to-r from-green-400 to-blue-500 h-3 rounded-full transition-all duration-300"
                         :style="`width: ${(answeredCount/@Model.Questions.Count) * 100}%`"></div>
                </div>
            </div>

            <!-- Questions -->
            @{
                var questionIndex = 0;
            }
            @foreach (var question in Model.Questions.OrderBy(q => q.OrderIndex))
            {
                <div class="bg-white rounded-xl shadow-lg p-8 mb-6 fade-in" style="animation-delay: @(questionIndex * 0.1)s;">
                    <div class="flex items-start">
                        <div class="flex-shrink-0 w-10 h-10 bg-indigo-100 rounded-full flex items-center justify-center mr-4">
                            <span class="text-indigo-600 font-bold">@(questionIndex + 1)</span>
                        </div>
                        <div class="flex-grow">
                            <h3 class="text-lg font-semibold text-gray-900 mb-6">@question.Question</h3>

                            <div class="space-y-3">
                                @foreach (var option in new[] {
                                                        new { Value = "A", Text = question.OptionA },
                                                        new { Value = "B", Text = question.OptionB },
                                                        new { Value = "C", Text = question.OptionC },
                                                        new { Value = "D", Text = question.OptionD }
                                                        })
                                {
                                    <label class="flex items-start p-4 border-2 border-gray-200 rounded-lg cursor-pointer hover:border-indigo-300 hover:bg-indigo-50 transition-all duration-200 group">
                                        <input type="radio"
                                               name="answers[@question.Id]"
                                               value="@option.Value"
                                               class="mt-1 mr-4 text-indigo-600 focus:ring-indigo-500"
                                               @@ onclick="updateAnswered()">
                                        <div class="flex-grow">
                                            <div class="flex items-center">
                                                <span class="w-8 h-8 bg-gray-100 rounded-full flex items-center justify-center text-sm font-semibold text-gray-600 mr-3 group-hover:bg-indigo-100 group-hover:text-indigo-600 transition-colors duration-200">
                                                    @option.Value
                                                </span>
                                                <span class="text-gray-700 group-hover:text-gray-900">@option.Text</span>
                                            </div>
                                        </div>
                                    </label>
                                }
                            </div>
                        </div>
                    </div>
                </div>

                questionIndex++;
            }

            <!-- Submit Section -->
            <div class="bg-white rounded-xl shadow-lg p-8 text-center">
                <div class="mb-6">
                    <h3 class="text-2xl font-bold text-gray-900 mb-2">Ready to Submit?</h3>
                    <p class="text-gray-600">Make sure you've answered all questions before submitting</p>
                </div>

                <div class="flex items-center justify-center space-x-4">
                    <button type="button"
                            @@click ="reviewAnswers()"
                            class="bg-gray-600 text-white px-6 py-3 rounded-lg hover:bg-gray-700 transition duration-200 font-semibold">
                        <i class="fas fa-search mr-2"></i>Review Answers
                    </button>
                    <button type="submit"
                            class="bg-gradient-to-r from-green-600 to-emerald-600 text-white px-8 py-3 rounded-lg hover:from-green-700 hover:to-emerald-700 transition duration-200 font-semibold"
                            onclick="return confirm('Are you sure you want to submit your quiz? You cannot change your answers after submission.')">
                        <i class="fas fa-paper-plane mr-2"></i>Submit Quiz
                    </button>
                </div>
            </div>
        </form>

        <!-- Time's Up Modal -->
        <div x-show="timeUp" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50" style="display: none;">
            <div class="bg-white rounded-xl p-8 max-w-md mx-4">
                <div class="text-center">
                    <i class="fas fa-clock text-6xl text-red-500 mb-4"></i>
                    <h3 class="text-2xl font-bold text-gray-900 mb-2">Time's Up!</h3>
                    <p class="text-gray-600 mb-6">Your quiz has been automatically submitted.</p>
                    <button @@click ="submitQuiz()"
                            class="bg-red-600 text-white px-6 py-3 rounded-lg hover:bg-red-700 transition duration-200 font-semibold">
                        <i class="fas fa-check mr-2"></i>OK
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function quizApp(timeLimit, totalQuestions) {
            return {
                quizStarted: false,
                timeLeft: timeLimit * 60, // Convert to seconds
                timeUp: false,
                timer: null,
                answeredCount: 0,

                startQuiz() {
                    this.quizStarted = true;
                    this.startTimer();
                },

                startTimer() {
                    this.timer = setInterval(() => {
                        if (this.timeLeft > 0) {
                            this.timeLeft--;
                        } else {
                            this.timeUp = true;
                            clearInterval(this.timer);
                        }
                    }, 1000);
                },

                formatTime(seconds) {
                    const minutes = Math.floor(seconds / 60);
                    const remainingSeconds = seconds % 60;
                    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
                },

                updateAnswered() {
                    setTimeout(() => {
                        const answered = document.querySelectorAll('input[type="radio"]:checked').length;
                        this.answeredCount = answered;
                    }, 100);
                },

                reviewAnswers() {
                    const unanswered = [];
                    const questions = document.querySelectorAll('[name^="answers["]');
                    const questionGroups = {};

                    questions.forEach(q => {
                        const questionId = q.name.match(/\d+/)[0];
                        if (!questionGroups[questionId]) {
                            questionGroups[questionId] = [];
                        }
                        questionGroups[questionId].push(q);
                    });

                    Object.keys(questionGroups).forEach((questionId, index) => {
                        const group = questionGroups[questionId];
                        const isAnswered = group.some(radio => radio.checked);
                        if (!isAnswered) {
                            unanswered.push(index + 1);
                        }
                    });

                    if (unanswered.length > 0) {
                        alert(`Please answer question(s): ${unanswered.join(', ')}`);

                        // Scroll to first unanswered question
                        const firstUnanswered = document.querySelectorAll('.bg-white.rounded-xl.shadow-lg')[unanswered[0]];
                        if (firstUnanswered) {
                            firstUnanswered.scrollIntoView({ behavior: 'smooth', block: 'center' });
                        }
                    } else {
                        alert('All questions answered! You\'re ready to submit.');
                    }
                },

                submitQuiz() {
                    document.querySelector('form').submit();
                }
            }
        }

        // Update answered count on page load
        document.addEventListener('DOMContentLoaded', function() {
            // Set up radio button listeners
            document.querySelectorAll('input[type="radio"]').forEach(radio => {
                radio.addEventListener('change', function() {
                    updateAnswered();
                });
            });
        });

        function updateAnswered() {
            const answered = document.querySelectorAll('input[type="radio"]:checked').length;
            // Update Alpine.js data if available
            if (window.Alpine) {
                const app = document.querySelector('[x-data]');
                if (app && app._x_dataStack && app._x_dataStack[0]) {
                    app._x_dataStack[0].answeredCount = answered;
                }
            }
        }

        // Add fade-in animations
        const fadeElements = document.querySelectorAll('.fade-in');
        fadeElements.forEach((el, index) => {
            el.style.opacity = '0';
            el.style.transform = 'translateY(20px)';
            el.style.transition = 'all 0.6s ease-out';

            setTimeout(() => {
                el.style.opacity = '1';
                el.style.transform = 'translateY(0)';
            }, index * 100);
        });
    </script>
}